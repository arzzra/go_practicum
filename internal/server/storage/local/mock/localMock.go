// Code generated by MockGen. DO NOT EDIT.
// Source: localInterface.go

// Package localmock is a generated GoMock package.
package localmock

import (
	reflect "reflect"

	metric "github.com/arzzra/go_practicum/internal/server/metric"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricStorage is a mock of MetricStorage interface.
type MockMetricStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorageMockRecorder
}

// MockMetricStorageMockRecorder is the mock recorder for MockMetricStorage.
type MockMetricStorageMockRecorder struct {
	mock *MockMetricStorage
}

// NewMockMetricStorage creates a new mock instance.
func NewMockMetricStorage(ctrl *gomock.Controller) *MockMetricStorage {
	mock := &MockMetricStorage{ctrl: ctrl}
	mock.recorder = &MockMetricStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorage) EXPECT() *MockMetricStorageMockRecorder {
	return m.recorder
}

// GetAllMetricFromStorage mocks base method.
func (m *MockMetricStorage) GetAllMetricFromStorage() (*[]metric.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetricFromStorage")
	ret0, _ := ret[0].(*[]metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetricFromStorage indicates an expected call of GetAllMetricFromStorage.
func (mr *MockMetricStorageMockRecorder) GetAllMetricFromStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricFromStorage", reflect.TypeOf((*MockMetricStorage)(nil).GetAllMetricFromStorage))
}

// GetMetricFromStorage mocks base method.
func (m *MockMetricStorage) GetMetricFromStorage(typeM metric.MetricType, name string) (*metric.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricFromStorage", typeM, name)
	ret0, _ := ret[0].(*metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricFromStorage indicates an expected call of GetMetricFromStorage.
func (mr *MockMetricStorageMockRecorder) GetMetricFromStorage(typeM, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricFromStorage", reflect.TypeOf((*MockMetricStorage)(nil).GetMetricFromStorage), typeM, name)
}

// SaveMetric mocks base method.
func (m_2 *MockMetricStorage) SaveMetric(m metric.Metric) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "SaveMetric", m)
}

// SaveMetric indicates an expected call of SaveMetric.
func (mr *MockMetricStorageMockRecorder) SaveMetric(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetric", reflect.TypeOf((*MockMetricStorage)(nil).SaveMetric), m)
}

// UpdateMetric mocks base method.
func (m_2 *MockMetricStorage) UpdateMetric(m metric.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMetric", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricStorageMockRecorder) UpdateMetric(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricStorage)(nil).UpdateMetric), m)
}
